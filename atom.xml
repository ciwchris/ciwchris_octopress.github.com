<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Notes to Self]]></title>
  <link href="http://ciwchris.github.com/atom.xml" rel="self"/>
  <link href="http://ciwchris.github.com/"/>
  <updated>2013-02-16T12:32:42-08:00</updated>
  <id>http://ciwchris.github.com/</id>
  <author>
    <name><![CDATA[Chris]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Entering escape in insert mode]]></title>
    <link href="http://ciwchris.github.com/blog/2013/02/16/entering-escape-in-insert-mode/"/>
    <updated>2013-02-16T16:17:00-08:00</updated>
    <id>http://ciwchris.github.com/blog/2013/02/16/entering-escape-in-insert-mode</id>
    <content type="html"><![CDATA[<p>In the previous post I created a macro which made use of an &#8216;escape&#8217;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>^dwA ^[pxj
</span></code></pre></td></tr></table></div></figure>


<p>When outputting the contents of the register containing this macro the &#8216;escape&#8217; is translated as <code>^[</code>. This shouldn&#8217;t be surpising. This format is known as <a href="http://en.wikipedia.org/wiki/Caret_notation">caret notation</a> and is used to represent non-printable control characters in ASCII. That explains the caret, but why the bracket? Interestingly, the bracket, by default, can be used as an alternative to the &#8216;escape&#8217; key in Vim, <code>h: i-ctrl-[</code>. The reason for the bracket has to do with <a href="http://en.wikipedia.org/wiki/Control_character#How_control_characters_map_to_keyboards">how control characters are mapped on keyboards</a>. As stated in the article, control characters are rendered by the ASCII value of the non-printable character plus 64. In this case the &#8216;escape&#8217; key has the <a href="http://en.wikipedia.org/wiki/ASCII#ASCII_control_characters">ASCII value of 27</a>. Adding 64 to this value gives us the decimal value of 91, which is <a href="http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters">represented by the bracket, &#8216;[&#8217;</a>. And that is why the &#8216;escape&#8217; was rendered as <code>^[</code> in the macro. <code>h: key-notation</code> contains a table detailing how many non-printable characters can be rendered in Vim.</p>

<p>The follow up question to this would be, &#8220;if I were to create the macro myself how would I type <code>^[</code>?&#8221; If the caret key was literally used then it would instruct Vim to move to the &#8220;first non-blank character of the line&#8221;, <code>:h ^</code>. Not our desired outcome. To type an &#8216;escape&#8217; it is necessary to use &#8216;ctrl-v&#8217;, which will &#8220;insert next non-digit literally&#8221;, <code>:h i_ctrl-v</code>. So to use an &#8216;escape&#8217; in a macro being created manually type: &#8216;ctrl-v&#8217; followed by &#8216;escape&#8217;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[examining the contents of a macro]]></title>
    <link href="http://ciwchris.github.com/blog/2013/02/13/examining-the-contents-of-a-macro/"/>
    <updated>2013-02-13T15:42:00-08:00</updated>
    <id>http://ciwchris.github.com/blog/2013/02/13/examining-the-contents-of-a-macro</id>
    <content type="html"><![CDATA[<p>Macros are a breeze in Vim! But often I make a mistake while recording the macro, undo my change and repeat. Hopefully I get it right the next time, but I&#8217;d rather not look at the statistics. It turns out the registers Vim stores macros in are the same set of registers used for other operations. What this means is that I can <code>put</code> the contents of the register, modify it and then <code>yank</code> it back in. Let&#8217;s say I had the following list of names:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>John Smith
</span><span class='line'>Joe Smith
</span><span class='line'>Bob Smith
</span><span class='line'>Mike Smith
</span><span class='line'>Juan Carlos
</span><span class='line'>Jane Smith
</span><span class='line'>Mike Jones
</span><span class='line'>David Smith
</span><span class='line'>Sarah Smith
</span><span class='line'>James Smith</span></code></pre></td></tr></table></div></figure>


<p>And I want to swap the first name and last name. There are many ways to do this but using a macro one may write:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>^dwA ^[pxj
</span></code></pre></td></tr></table></div></figure>


<p>I can read these commands into register <code>a</code> by yanking the line like so, <code>"ay$</code>. Now I can use it as a macro to swap the names, <code>10@a</code>. Voil√†!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>Smith John
</span><span class='line'>Smith Joe
</span><span class='line'>Smith Bob
</span><span class='line'>Smith Mike
</span><span class='line'>Carlos Juan
</span><span class='line'>Smith Jane
</span><span class='line'>Jones Mike
</span><span class='line'>Smith David
</span><span class='line'>Smith Sarah
</span><span class='line'>Smith James
</span></code></pre></td></tr></table></div></figure>


<p>To always make this macro avaiable I can save it in my <code>.vimrc</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> @<span class="k">a</span><span class="p">=</span><span class="s1">&#39;^dwA ^[pxj&#39;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reversing a file in vim]]></title>
    <link href="http://ciwchris.github.com/blog/2013/02/11/reversing-a-file-in-vim/"/>
    <updated>2013-02-11T14:30:00-08:00</updated>
    <id>http://ciwchris.github.com/blog/2013/02/11/reversing-a-file-in-vim</id>
    <content type="html"><![CDATA[<p>Digging through the Vim help docs <code>:h usr_12.txt</code> I came across the topic &#8216;Reverse line order&#8217;, <code>h 12.1</code>. Sounds interesting. The command is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>global<span class="sr">/^/</span><span class="k">m</span> <span class="m">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>While familar with <code>:global</code> the rest of the command was mysterious. The documentation did a good job breaking this down. <code>^</code> will match the beginning of every line. <code>m 0</code> will <code>:move</code> the line below the line number specified; in other words move the current line to the first line of the file. Line &#8216;0&#8217; is called the &#8216;mythical zeroth line&#8217;, according to the docs. The same came be done with a range using marks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="s1">&#39;t+1,.g/^/m &#39;</span><span class="k">t</span>
</span></code></pre></td></tr></table></div></figure>


<p>`
Here, assuming mark &#8216;t&#8217; has been set, then all lines between it and the current line will be reversed.</p>

<p><code>:move</code> was also new to me, although straight forward. It&#8217;s compliment, <code>:copy</code>, it also worth noting here, also defined as <code>:t</code>.</p>
]]></content>
  </entry>
  
</feed>
