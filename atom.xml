<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Notes to Self]]></title>
  <link href="http://ciwchris.github.com/atom.xml" rel="self"/>
  <link href="http://ciwchris.github.com/"/>
  <updated>2013-08-26T19:20:12-07:00</updated>
  <id>http://ciwchris.github.com/</id>
  <author>
    <name><![CDATA[Chris]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Starting a Technology Radar]]></title>
    <link href="http://ciwchris.github.com/blog/2013/08/26/starting-a-technology-radar/"/>
    <updated>2013-08-26T18:26:00-07:00</updated>
    <id>http://ciwchris.github.com/blog/2013/08/26/starting-a-technology-radar</id>
    <content type="html"><![CDATA[<p>I became intrigued by the idea of creating a <a href="http://www.thoughtworks.com/radar">Technology Radar</a> while listening to <a href="nealford.com">Neal Ford</a> on the <a href="http://thinkrelevance.com/blog/2013/07/26/neal-ford-of-thoughtworks-episode-036">Relevance Podcast</a>. Initially the plan was to <a href="http://nealford.com/memeagora/2013/05/28/build_your_own_technology_radar.html">create a radar</a> for our department at work. My thinking was that it would give focus to developers, which technology to concentrate on and which should be used in projects, as well as give visibility as to what directions developers are exploring, and therefore what may start appearing in projects. It would also give management a good visual, and explanation if we did a write up, as to what we are using and where we are heading. It&#8217;s questionable whether any action will be taken to create one but after reading the section on creating a <em>Personal Radar</em> I became motivated to create my own.</p>

<p>Why did I create my own radar? I consume information from a variety of sources. As a result I&#8217;m exposed to many interesting topics and ideas. I&#8217;ve come to realize it is too many. I tend to find one interesting topic, begin to pursue it only to be interrupted by the next interesting thing to come my way. In the end I have an awareness of many things but have learned none. I therefore concluded that I needed to focus on a small number of items, but still allow myself to be exposed to other items as well. I decided a <em>Personal Radar</em> may help me do just that. Each quarter, or perhaps twice a year, I will update a personal radar. The items I focus on will be selected from the radar. When I produce the next radar then I will select a new set of items to focus on. My hope is that I may become disciplined and learn an item more in-depth before moving on to the next interesting thing. So without further delay, below is my personal radar, probably for the remainder of the year, and explanation text, a work in progress.</p>

<p><a href="http://ciwchris.github.com/technology-radar/technology-radar.html">Personal Radar</a><br/>
<a href="http://ciwchris.github.com/technology-radar/explanation.html">Radar Explanation</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocking With Moq]]></title>
    <link href="http://ciwchris.github.com/blog/2013/03/04/mocking-with-moq/"/>
    <updated>2013-03-04T21:29:00-08:00</updated>
    <id>http://ciwchris.github.com/blog/2013/03/04/mocking-with-moq</id>
    <content type="html"><![CDATA[<p>Notes for the pluralsight course <a href="http://pluralsight.com/training/Courses/TableOfContents/mocking-with-moq">Mocking With Moq</a>.</p>

<h3>Unit tests should be</h3>

<ul>
<li><strong>Atomic:</strong> one small thing</li>
<li><strong>Deterministic:</strong> pass or fail</li>
<li><strong>Repeatable:</strong> shouldn&#8217;t start failing if no code has changed</li>
<li><strong>Isolated and order independent:</strong> nothing should affect it</li>
<li><strong>Fast:</strong> milliseconds</li>
<li><strong>Easy to setup:</strong> shouldn&#8217;t take a lot of coding</li>
</ul>


<h3>Samples</h3>

<figure class='code'><figcaption><span>Verify a method is called</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">mockRepository</span><span class="p">.</span><span class="n">Setup</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Save</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;()));</span>
</span><span class='line'>
</span><span class='line'><span class="n">mockRepository</span><span class="p">.</span><span class="n">VerifyAll</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Verify a method was called n times</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">mockCustomerRepository</span><span class="p">.</span><span class="n">Verify</span><span class="p">(</span><span class="n">x</span><span class="p">=&gt;</span><span class="n">x</span><span class="p">.</span><span class="n">Save</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;()),</span>
</span><span class='line'>  <span class="n">Times</span><span class="p">.</span><span class="n">Exactly</span><span class="p">(</span><span class="m">2</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Mock return a value</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">mockAddressBuilder</span>
</span><span class='line'>  <span class="p">.</span><span class="n">Setup</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">From</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="n">CustomerToCreateDto</span><span class="p">&gt;()))</span>
</span><span class='line'>  <span class="p">.</span><span class="n">Returns</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">Address</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">mockCustomerRepository</span><span class="p">.</span><span class="n">Verify</span><span class="p">(</span><span class="n">y</span><span class="p">=&gt;</span><span class="n">y</span><span class="p">.</span><span class="n">Save</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;()));</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Using an out parameter</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">mockMailingAddressFactory</span>
</span><span class='line'>  <span class="p">.</span><span class="n">Setup</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">TryParse</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;(),</span> <span class="k">out</span> <span class="n">mailingAddress</span><span class="p">))</span>
</span><span class='line'>  <span class="p">.</span><span class="n">Returns</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">mockCustomerRepository</span><span class="p">.</span><span class="n">Verify</span><span class="p">(</span><span class="n">x</span><span class="p">=&gt;</span><span class="n">x</span><span class="p">.</span><span class="n">Save</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;()));</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Change the return value after each call to the mocked member</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">mockIdFactory</span><span class="p">.</span><span class="n">Setup</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Create</span><span class="p">())</span>
</span><span class='line'>  <span class="p">.</span><span class="n">Returns</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">Callback</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">i</span><span class="p">++);</span>
</span><span class='line'>
</span><span class='line'><span class="n">mockIdFactory</span><span class="p">.</span><span class="n">Verify</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Create</span><span class="p">(),</span> <span class="n">Times</span><span class="p">.</span><span class="n">AtLeastOnce</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Verify the arguments passed to the mocked method are as expected</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">mockFullNameBuilder</span><span class="p">.</span><span class="n">Setup</span><span class="p">(</span>
</span><span class='line'>  <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">From</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;(),</span> <span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;()));</span>
</span><span class='line'>
</span><span class='line'><span class="n">mockFullNameBuilder</span><span class="p">.</span><span class="n">Verify</span><span class="p">(</span><span class="n">x</span><span class="p">=&gt;</span><span class="n">x</span><span class="p">.</span><span class="n">From</span><span class="p">(</span>
</span><span class='line'>  <span class="n">It</span><span class="p">.</span><span class="n">Is</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;(</span>
</span><span class='line'>      <span class="n">fn</span><span class="p">=&gt;</span><span class="n">fn</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="n">customerToCreateDto</span><span class="p">.</span><span class="n">FirstName</span><span class="p">,</span>
</span><span class='line'>          <span class="n">StringComparison</span><span class="p">.</span><span class="n">InvariantCultureIgnoreCase</span><span class="p">)),</span>
</span><span class='line'>  <span class="n">It</span><span class="p">.</span><span class="n">Is</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;(</span>
</span><span class='line'>      <span class="n">fn</span><span class="p">=&gt;</span><span class="n">fn</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="n">customerToCreateDto</span><span class="p">.</span><span class="n">LastName</span><span class="p">,</span>
</span><span class='line'>          <span class="n">StringComparison</span><span class="p">.</span><span class="n">InvariantCultureIgnoreCase</span><span class="p">))));</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Conditionally return a value, control code flow</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">mockCustomerStatusFactory</span><span class="p">.</span><span class="n">Setup</span><span class="p">(</span>
</span><span class='line'>  <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">CreateFrom</span><span class="p">(</span>
</span><span class='line'>      <span class="n">It</span><span class="p">.</span><span class="n">Is</span><span class="p">&lt;</span><span class="n">CustomerToCreateDto</span><span class="p">&gt;(</span>
</span><span class='line'>          <span class="n">y</span> <span class="p">=&gt;</span> <span class="n">y</span><span class="p">.</span><span class="n">DesiredStatus</span> <span class="p">==</span> <span class="n">CustomerStatus</span><span class="p">.</span><span class="n">Platinum</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">.</span><span class="n">Returns</span><span class="p">(</span><span class="n">CustomerStatus</span><span class="p">.</span><span class="n">Platinum</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">mockCustomerRepository</span><span class="p">.</span><span class="n">Verify</span><span class="p">(</span>
</span><span class='line'>  <span class="n">x</span><span class="p">=&gt;</span><span class="n">x</span><span class="p">.</span><span class="n">SaveSpecial</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;()));</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Throw an exception</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">mockCustomerAddressFactory</span>
</span><span class='line'>  <span class="p">.</span><span class="n">Setup</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">From</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="n">CustomerToCreateDto</span><span class="p">&gt;()))</span>
</span><span class='line'>  <span class="p">.</span><span class="n">Throws</span><span class="p">&lt;</span><span class="n">InvalidCustomerAddressException</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Verify a setter has been set</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">mockCustomerRepository</span><span class="p">.</span><span class="n">VerifySet</span><span class="p">(</span>
</span><span class='line'>  <span class="n">x</span><span class="p">=&gt;</span><span class="n">x</span><span class="p">.</span><span class="n">LocalTimeZone</span> <span class="p">=</span> <span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;());</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Verify a getter has been called</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">mockApplicationSettings</span><span class="p">.</span><span class="n">Setup</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">WorkstationId</span><span class="p">).</span><span class="n">Returns</span><span class="p">(</span><span class="m">123</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">mockApplicationSettings</span><span class="p">.</span><span class="n">VerifyGet</span><span class="p">(</span><span class="n">x</span><span class="p">=&gt;</span><span class="n">x</span><span class="p">.</span><span class="n">WorkstationId</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>For nested objects you don&#8217;t have to mock each object; Moq will automatically return a mocked object if it can.</p>

<figure class='code'><figcaption><span>Recursive/nested properties, Moq realizes each is mockable and so will return a mock for each</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">mockApplicationSettings</span><span class="p">.</span><span class="n">Setup</span><span class="p">(</span>
</span><span class='line'>  <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">SystemConfiguration</span><span class="p">.</span><span class="n">AuditingInformation</span><span class="p">.</span><span class="n">WorkstationId</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">Returns</span><span class="p">(</span><span class="m">123</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">mockApplicationSettings</span><span class="p">.</span><span class="n">VerifyGet</span><span class="p">(</span>
</span><span class='line'>  <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">SystemConfiguration</span><span class="p">.</span><span class="n">AuditingInformation</span><span class="p">.</span><span class="n">WorkstationId</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Stub a property</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">mockApplicationSettings</span><span class="p">.</span><span class="n">SetupProperty</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">WorkstationId</span><span class="p">,</span> <span class="m">1234</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">mockApplicationSettings</span><span class="p">.</span><span class="n">VerifyGet</span><span class="p">(</span><span class="n">x</span><span class="p">=&gt;</span><span class="n">x</span><span class="p">.</span><span class="n">WorkstationId</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Stub all properties</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">mockApplicationSettings</span><span class="p">.</span><span class="n">SetupAllProperties</span><span class="p">();</span>
</span><span class='line'><span class="n">mockApplicationSettings</span><span class="p">.</span><span class="n">Object</span><span class="p">.</span><span class="n">WorkstationId</span> <span class="p">=</span> <span class="m">2345</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">mockApplicationSettings</span><span class="p">.</span><span class="n">VerifyGet</span><span class="p">(</span><span class="n">x</span><span class="p">=&gt;</span><span class="n">x</span><span class="p">.</span><span class="n">WorkstationId</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Event</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">mockCustomerRepository</span><span class="p">.</span><span class="n">Raise</span><span class="p">(</span>
</span><span class='line'>  <span class="n">x</span><span class="p">=&gt;</span><span class="n">x</span><span class="p">.</span><span class="n">NotifySalesTeam</span> <span class="p">+=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>  <span class="k">new</span> <span class="nf">NotifySalesTeamEventArgs</span><span class="p">(</span><span class="s">&quot;jim&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">mockMailingRepository</span><span class="p">.</span><span class="n">Verify</span><span class="p">(</span>
</span><span class='line'>  <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">NewCustomerMessage</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;()));</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Custom event</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">mockCustomerRepository</span><span class="p">.</span><span class="n">Raise</span><span class="p">(</span>
</span><span class='line'>  <span class="n">x</span><span class="p">=&gt;</span><span class="n">x</span><span class="p">.</span><span class="n">NotifySalesTeam</span> <span class="p">+=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;jim&quot;</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">mockMailingRepository</span><span class="p">.</span><span class="n">Verify</span><span class="p">(</span>
</span><span class='line'>  <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">NewCustomerMessage</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;()));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Two types of mocks:</p>

<ol>
<li><strong>Loose:</strong> if the object doesn&#8217;t have any expectations set it will return the default value for the object. It will not throw an exception when verify is called. This is the default behavior for Moq</li>
<li><strong>Strict:</strong> exception will be thrown if the object hasn&#8217;t been explicitly setup.</li>
</ol>


<figure class='code'><figcaption><span>Strict mock behavior</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">var</span> <span class="n">mockCustomerRepository</span> <span class="p">=</span>
</span><span class='line'>  <span class="k">new</span> <span class="n">Mock</span><span class="p">&lt;</span><span class="n">ICustomerRepository</span><span class="p">&gt;(</span><span class="n">MockBehavior</span><span class="p">.</span><span class="n">Strict</span><span class="p">);</span>
</span><span class='line'><span class="n">mockCustomerRepository</span><span class="p">.</span><span class="n">Setup</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Save</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;()));</span>
</span><span class='line'>
</span><span class='line'><span class="n">mockCustomerRepository</span><span class="p">.</span><span class="n">Verify</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Partial mock:</strong> allows invocation of a base class implementation</p>

<figure class='code'><figcaption><span>Mock the SUT when working with a base class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">mockNameFormatter</span><span class="p">.</span><span class="n">Object</span><span class="p">.</span><span class="n">From</span><span class="p">(</span><span class="k">new</span> <span class="n">Customer</span><span class="p">(</span><span class="s">&quot;Bob&quot;</span><span class="p">,</span> <span class="s">&quot;SAPBuilder&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">mockNameFormatter</span><span class="p">.</span><span class="n">Verify</span><span class="p">(</span>
</span><span class='line'>  <span class="n">x</span><span class="p">=&gt;</span><span class="n">x</span><span class="p">.</span><span class="n">ParseBadWordsFrom</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;()),</span>
</span><span class='line'>  <span class="n">Times</span><span class="p">.</span><span class="n">Exactly</span><span class="p">(</span><span class="m">2</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Recursive:</strong> Set the defaul value of a mock to return a mocked object, &#8216;DefaultValue = DefaultValue.Mock<code>, instead of the object's default value, this only works if  the object is mockable. Then use</code>Mock.Get()` to retrieve the actual mock which can then be used like any other mocked object</p>

<figure class='code'><figcaption><span>Recursive mock</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">var</span> <span class="n">mockAddressFormatterFactory</span> <span class="p">=</span>
</span><span class='line'>  <span class="k">new</span> <span class="n">Mock</span><span class="p">&lt;</span><span class="n">IAddressFormatterFactory</span><span class="p">&gt;</span>
</span><span class='line'>      <span class="p">{</span><span class="n">DefaultValue</span> <span class="p">=</span> <span class="n">DefaultValue</span><span class="p">.</span><span class="n">Mock</span><span class="p">};</span>
</span><span class='line'><span class="kt">var</span> <span class="n">addressFormatter</span> <span class="p">=</span> <span class="n">mockAddressFormatterFactory</span>
</span><span class='line'>  <span class="p">.</span><span class="n">Object</span><span class="p">.</span><span class="n">From</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;());</span>
</span><span class='line'><span class="kt">var</span> <span class="n">mock</span> <span class="p">=</span> <span class="n">Mock</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="n">addressFormatter</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">mock</span><span class="p">.</span><span class="n">Verify</span><span class="p">(</span><span class="n">x</span><span class="p">=&gt;</span><span class="n">x</span><span class="p">.</span><span class="n">From</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="n">CustomerToCreateDto</span><span class="p">&gt;()));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Use a mock factory when working with lots of dependencies. This centralizes the creation and verification of all mock objects.</p>

<figure class='code'><figcaption><span>Mock factory</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">var</span> <span class="n">mockFactory</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MockRepository</span><span class="p">(</span><span class="n">MockBehavior</span><span class="p">.</span><span class="n">Loose</span><span class="p">)</span>
</span><span class='line'>              <span class="p">{</span><span class="n">DefaultValue</span> <span class="p">=</span> <span class="n">DefaultValue</span><span class="p">.</span><span class="n">Mock</span><span class="p">};</span>
</span><span class='line'><span class="kt">var</span> <span class="n">mockCustomerRepository</span> <span class="p">=</span>
</span><span class='line'>  <span class="n">mockFactory</span><span class="p">.</span><span class="n">Create</span><span class="p">&lt;</span><span class="n">ICustomerRepository</span><span class="p">&gt;();</span>
</span><span class='line'><span class="kt">var</span> <span class="n">mockCustomerAddressFormatter</span> <span class="p">=</span>
</span><span class='line'>  <span class="n">mockFactory</span><span class="p">.</span><span class="n">Create</span><span class="p">&lt;</span><span class="n">ICustomerAddressFormatter</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="n">mockFactory</span><span class="p">.</span><span class="n">Verify</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>When mocking protected members the member must be marked as virtual. You lose intellisense, method name must appear in a string. Must use <code>ItExpr</code> instead of <code>It</code>.</p>

<figure class='code'><figcaption><span>Protected members</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">mockCustomerNameFormatter</span><span class="p">.</span><span class="n">Protected</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="n">Setup</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;(</span><span class="s">&quot;ParseBadWordsFrom&quot;</span><span class="p">,</span> <span class="n">ItExpr</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;())</span>
</span><span class='line'>  <span class="p">.</span><span class="n">Returns</span><span class="p">(</span><span class="s">&quot;asdf&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">Verifiable</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">mockCustomerNameFormatter</span><span class="p">.</span><span class="n">Verify</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Reasonable Expectations of Your CTO]]></title>
    <link href="http://ciwchris.github.com/blog/2013/02/25/the-reasonable-expectations-of-your-cto/"/>
    <updated>2013-02-25T21:11:00-08:00</updated>
    <id>http://ciwchris.github.com/blog/2013/02/25/the-reasonable-expectations-of-your-cto</id>
    <content type="html"><![CDATA[<p>Notes from the presentation &#8220;The Reasonable Expectations of Your CTO&#8221; given by Uncle Bob: <a href="http://vimeo.com/56708193">Demanding Professionalism: Uncle Bob @ Philly .NET User Group</a>. The talk begins approximately 21 minutes in.</p>

<h3>Reasonable Expectations</h3>

<ul>
<li><strong>Don&#8217;t ship junk:</strong> &#8220;But we had to make a mess to make the deadline.&#8221; This is a bad trade off. Take the time, it will keep you going fast later.</li>
<li><strong>Always be ready to ship:</strong> Not all the features may be complete, but it is a business decision to ship it or not. We should always be ready, at any moment.</li>
<li><strong>Stable Productivity:</strong> It&#8217;s easy to start a project fast. Inevitably you start slowing down more and more. Start and continue well.</li>
<li><strong>Inexpensive adaptability:</strong> A change in requirements should be cheap. It&#8217;s called <em>soft</em>ware for a reason.</li>
<li><strong>Continuous improvement:</strong> Code should be left better. Could should not be left to rot.</li>
<li><strong>Fearless competence:</strong> Should not be afraid to change the code.</li>
<li><strong>Extreme quality:</strong> Should feel good about the work we did. This should be our first motivation.</li>
<li><strong>Will not dump on QA:</strong> QA should not find anything. Should be considered a failure if they do.</li>
<li><strong>Automation:</strong> QA shouldn&#8217;t have to spend a day verifying everything in the application. Automation can perform this task.</li>
<li><strong>Nothing fragile:</strong> Shouldn&#8217;t be afraid to touch something because you might break it.</li>
<li><strong>Cover for each other:</strong> Someone else should know what you know. If you are gone someone else should be able to perform your tasks.</li>
<li><strong>Honest estimates:</strong> Accurate versus precise. Don&#8217;t say you can do something when you know you can&#8217;t.</li>
<li><strong>Say &#8220;No&#8221;:</strong> When it&#8217;s wrong you need to say so.</li>
<li><strong>Continuous aggressive learning:</strong> Need to be at the front of change. We are responsible for our career.</li>
<li><strong>Teaching:</strong> We don&#8217;t train new developers how to be developers. We leave them on their own. Teaching also helps us learn.</li>
</ul>


<h3>Questions</h3>

<ul>
<li>Are any of the expectations, by themselves, unreasonable?</li>
<li>Any of these expectations standout? Any you felt more passionate about?</li>
<li>Were any of the comments made, while unpacking the expectations, unreasonable?</li>
<li>How well do we meet each expectation?</li>
<li>For those expectations we are weak can we rank in priority order and then, beginning at the highest, make a change to improve our ability to meet the expectation?</li>
</ul>


<p>Robbie Clutton posted similar notes on this presentation which are worth viewing: <a href="http://pivotallabs.com/uncle-bob-agile-testing-and-bdd/">Agile Testing and BDD</a>.</p>

<p>Relatedly, Bevan&#8217;s post on <a href="http://www.nichesoftware.co.nz/blog/2013-01/607/secret-awesome-software">&#8220;The secret to Awesome software&#8221;</a> is well worth a read.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Entering escape in insert mode]]></title>
    <link href="http://ciwchris.github.com/blog/2013/02/16/entering-escape-in-insert-mode/"/>
    <updated>2013-02-16T16:17:00-08:00</updated>
    <id>http://ciwchris.github.com/blog/2013/02/16/entering-escape-in-insert-mode</id>
    <content type="html"><![CDATA[<p>In the previous post I created a macro which made use of an &#8216;escape&#8217;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>^dwA ^[pxj
</span></code></pre></td></tr></table></div></figure>


<p>When outputting the contents of the register containing this macro the &#8216;escape&#8217; is translated as <code>^[</code>. This shouldn&#8217;t be surpising. This format is known as <a href="http://en.wikipedia.org/wiki/Caret_notation">caret notation</a> and is used to represent non-printable control characters in ASCII. That explains the caret, but why the bracket? Interestingly, the bracket, by default, can be used as an alternative to the &#8216;escape&#8217; key in Vim, <code>h: i-ctrl-[</code>. The reason for the bracket has to do with <a href="http://en.wikipedia.org/wiki/Control_character#How_control_characters_map_to_keyboards">how control characters are mapped on keyboards</a>. As stated in the article, control characters are rendered by the ASCII value of the non-printable character plus 64. In this case the &#8216;escape&#8217; key has the <a href="http://en.wikipedia.org/wiki/ASCII#ASCII_control_characters">ASCII value of 27</a>. Adding 64 to this value gives us the decimal value of 91, which is <a href="http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters">represented by the bracket, &#8216;[&#8217;</a>. And that is why the &#8216;escape&#8217; was rendered as <code>^[</code> in the macro. <code>h: key-notation</code> contains a table detailing how many non-printable characters can be rendered in Vim.</p>

<p>The follow up question to this would be, &#8220;if I were to create the macro myself how would I type <code>^[</code>?&#8221; If the caret key was literally used then it would instruct Vim to move to the &#8220;first non-blank character of the line&#8221;, <code>:h ^</code>. Not our desired outcome. To type an &#8216;escape&#8217; it is necessary to use &#8216;ctrl-v&#8217;, which will &#8220;insert next non-digit literally&#8221;, <code>:h i_ctrl-v</code>. So to use an &#8216;escape&#8217; in a macro being created manually type: &#8216;ctrl-v&#8217; followed by &#8216;escape&#8217;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[examining the contents of a macro]]></title>
    <link href="http://ciwchris.github.com/blog/2013/02/13/examining-the-contents-of-a-macro/"/>
    <updated>2013-02-13T15:42:00-08:00</updated>
    <id>http://ciwchris.github.com/blog/2013/02/13/examining-the-contents-of-a-macro</id>
    <content type="html"><![CDATA[<p>Macros are a breeze in Vim! But often I make a mistake while recording the macro, undo my change and repeat. Hopefully I get it right the next time, but I&#8217;d rather not look at the statistics. It turns out the registers Vim stores macros in are the same set of registers used for other operations. What this means is that I can <code>put</code> the contents of the register, modify it and then <code>yank</code> it back in. Let&#8217;s say I had the following list of names:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>John Smith
</span><span class='line'>Joe Smith
</span><span class='line'>Bob Smith
</span><span class='line'>Mike Smith
</span><span class='line'>Juan Carlos
</span><span class='line'>Jane Smith
</span><span class='line'>Mike Jones
</span><span class='line'>David Smith
</span><span class='line'>Sarah Smith
</span><span class='line'>James Smith</span></code></pre></td></tr></table></div></figure>


<p>And I want to swap the first name and last name. There are many ways to do this but using a macro one may write:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>^dwA ^[pxj
</span></code></pre></td></tr></table></div></figure>


<p>I can read these commands into register <code>a</code> by yanking the line like so, <code>"ay$</code>. Now I can use it as a macro to swap the names, <code>10@a</code>. Voilà!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>Smith John
</span><span class='line'>Smith Joe
</span><span class='line'>Smith Bob
</span><span class='line'>Smith Mike
</span><span class='line'>Carlos Juan
</span><span class='line'>Smith Jane
</span><span class='line'>Jones Mike
</span><span class='line'>Smith David
</span><span class='line'>Smith Sarah
</span><span class='line'>Smith James
</span></code></pre></td></tr></table></div></figure>


<p>To always make this macro avaiable I can save it in my <code>.vimrc</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> @<span class="k">a</span><span class="p">=</span><span class="s1">&#39;^dwA ^[pxj&#39;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reversing a file in vim]]></title>
    <link href="http://ciwchris.github.com/blog/2013/02/11/reversing-a-file-in-vim/"/>
    <updated>2013-02-11T14:30:00-08:00</updated>
    <id>http://ciwchris.github.com/blog/2013/02/11/reversing-a-file-in-vim</id>
    <content type="html"><![CDATA[<p>Digging through the Vim help docs <code>:h usr_12.txt</code> I came across the topic &#8216;Reverse line order&#8217;, <code>h 12.1</code>. Sounds interesting. The command is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>global<span class="sr">/^/</span><span class="k">m</span> <span class="m">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>While familar with <code>:global</code> the rest of the command was mysterious. The documentation did a good job breaking this down. <code>^</code> will match the beginning of every line. <code>m 0</code> will <code>:move</code> the line below the line number specified; in other words move the current line to the first line of the file. Line &#8216;0&#8217; is called the &#8216;mythical zeroth line&#8217;, according to the docs. The same came be done with a range using marks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="s1">&#39;t+1,.g/^/m &#39;</span><span class="k">t</span>
</span></code></pre></td></tr></table></div></figure>


<p>`
Here, assuming mark &#8216;t&#8217; has been set, then all lines between it and the current line will be reversed.</p>

<p><code>:move</code> was also new to me, although straight forward. It&#8217;s compliment, <code>:copy</code>, it also worth noting here, also defined as <code>:t</code>.</p>
]]></content>
  </entry>
  
</feed>
